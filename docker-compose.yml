services:
  neo4j:
    image: neo4j:5.15-community
    environment:
      NEO4J_AUTH: neo4j/password123
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_dbms_security_procedures_unrestricted: gds.*,apoc.*
      NEO4J_server_memory_heap_initial__size: 512m
      NEO4J_server_memory_heap_max__size: 2G
      NEO4J_server_memory_pagecache_size: 1G
    ports:
      - "7474:7474"   # Browser
      - "7687:7687"   # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - ./neo4j:/var/lib/neo4j/import
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password123", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - etf-network

  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD-SHELL", "timeout 5s bash -c '</dev/tcp/localhost/11434'"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    profiles:
      - gpu
    networks:
      - etf-network

  ollama-cpu:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"  
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD-SHELL", "timeout 5s bash -c '</dev/tcp/localhost/11434'"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 60s
    profiles:
      - cpu
    networks:
      - etf-network

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    env_file: .env
    ports:
      - "8000:8000"
    environment:
      - NEO4J_URI=${NEO4J_URI}
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - OLLAMA_HOST=${OLLAMA_HOST}
      - ALLOWED_TICKERS=["SPY","QQQ","IWM","IJH","IVE","IVW"]
      - LOG_LEVEL=${LOG_LEVEL}
      - MAX_QUERY_LENGTH=${MAX_QUERY_LENGTH}
      - RESPONSE_CACHE_TTL=${RESPONSE_CACHE_TTL}
    depends_on:
      neo4j:
        condition: service_healthy
      ollama:
        condition: service_healthy
        required: false
      ollama-cpu:
        condition: service_healthy
        required: false
    volumes:
      - ./etl:/app/etl
      - api_cache:/app/cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - etf-network

  ui:
    build:
      context: ./ui
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL}
    env_file: .env
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=${VITE_API_URL}
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - etf-network

  init:
    build:
      context: ./scripts
      dockerfile: Dockerfile
    env_file: .env
    environment:
      - NEO4J_URI=${NEO4J_URI}
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - OLLAMA_HOST=${OLLAMA_HOST}
    depends_on:
      neo4j:
        condition: service_healthy
      api:
        condition: service_healthy
      ollama:
        condition: service_healthy
        required: false
      ollama-cpu:
        condition: service_healthy
        required: false
    volumes:
      - ./neo4j:/app/neo4j
      - ./etl:/app/etl
    profiles:
      - init
    networks:
      - etf-network

volumes:
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  ollama_data:
    driver: local
  api_cache:
    driver: local

networks:
  etf-network:
    driver: bridge
    name: etf-graphrag-network